{"version":3,"sources":["components/AutoComplteEmail.tsx","components/CmCdCascader.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Option","AutoComplete","AutoComplteEmail","useState","result","setResult","style","width","placeholder","onSearch","value","res","indexOf","map","domain","email","key","option","label","isLeaf","CmCdCascader","options","setOptions","getRandomArbitrary","min","max","Math","random","onChange","selectedOptions","console","log","loadData","targetOption","length","loading","setTimeout","children","i","push","changeOnSelect","Header","Layout","Content","Sider","Footer","SubMenu","Menu","RangePicker","DatePicker","Select","radioOptions","ResizableTitle","props","onResize","restProps","height","handle","className","onClick","e","stopPropagation","draggableOpts","enableUserSelectHack","App","code","name","title","dataIndex","sorter","a","b","amount","render","columns","setColumns","header","cell","components","date","type","note","data","collapsed","setCollapsed","rdoVal","setRdoVal","handleResize","index","size","nextColumns","useEffect","state","col","onHeaderCell","column","minHeight","collapsible","onCollapse","background","margin","mode","theme","defaultSelectedKeys","defaultOpenKeys","borderRight","icon","UserOutlined","Item","LayoutOutlined","NotificationOutlined","position","zIndex","padding","marginTop","marginLeft","marginBottom","gutter","span","rules","required","message","showTime","Group","target","optionType","textAlign","htmlType","fontSize","bordered","dataSource","Boolean","window","location","hostname","match","ReactDOM","basename","process","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.ec9d11c4.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { AutoComplete } from 'antd';\r\n\r\nconst { Option } = AutoComplete;\r\n\r\nconst AutoComplteEmail = () => {\r\n\r\n    const [result, setResult] = useState<string[]>([]);\r\n\r\n    const handleSearch = (value: string) => {\r\n\r\n        let res: string[] = [];\r\n\r\n        if(!value || value.indexOf('@') >= 0) {\r\n            res = [];\r\n        }\r\n        else {\r\n            res = ['retailtech.co.kr', 'naver.com', 'gmail.com', 'nate.com'].map(domain => `${value}@${domain}`);\r\n        }\r\n\r\n        setResult(res);\r\n    };\r\n\r\n    return (\r\n        <AutoComplete \r\n            style={{ width: 200 }}\r\n            placeholder=\"Email Input\"\r\n            onSearch={handleSearch}\r\n        >\r\n        {result.map(email => (\r\n            <Option key={email} value={email}>{email}</Option>\r\n        ))}\r\n        </AutoComplete>\r\n    );\r\n};\r\n\r\nexport default AutoComplteEmail;","import React, { useState } from 'react';\r\nimport { Cascader } from 'antd';\r\n\r\nconst option = [\r\n    {\r\n      value: 'zhejiang',\r\n      label: 'Zhejiang',\r\n      isLeaf: false,\r\n    },\r\n    {\r\n      value: 'jiangsu',\r\n      label: 'Jiangsu',\r\n      isLeaf: false,\r\n    },\r\n];\r\n\r\n\r\n\r\nconst CmCdCascader = () => {\r\n\r\n    const [options, setOptions] = useState<any>(option);\r\n\r\n    const onChange = (value: any, selectedOptions: any) => {\r\n        console.log(value, selectedOptions);\r\n    };\r\n\r\n    const loadData = (selectedOptions: any) => {\r\n\r\n        console.log('selectedOptions : ', selectedOptions);\r\n\r\n        const targetOption = selectedOptions[selectedOptions.length - 1];\r\n        targetOption.loading = true;\r\n\r\n        setTimeout(() => {\r\n            targetOption.loading = false;\r\n\r\n            targetOption.children = [];\r\n\r\n            for(let i = 0; i<getRandomArbitrary(0, 3); i++) {\r\n                targetOption.children.push({\r\n                    label: `${targetOption.label} Dynamic ${i}`,\r\n                    value: `dynamic${i}`,\r\n                    isLeaf: selectedOptions.length < 2 ? false : true,\r\n                });  \r\n            }\r\n\r\n            // targetOption.children = [\r\n            //     {\r\n            //         label: `${targetOption.label} Dynamic 1`,\r\n            //         value: 'dynamic1',\r\n            //         isLeaf: false,\r\n            //     },\r\n            //     {\r\n            //         label: `${targetOption.label} Dynamic 2`,\r\n            //         value: 'dynamic2',\r\n            //         isLeaf: false,\r\n            //     },\r\n            // ];\r\n\r\n            setOptions([\r\n                ...options\r\n            ]);\r\n        }, 1000);\r\n    };\r\n\r\n    const getRandomArbitrary = (min: number, max: number) => {\r\n        return Math.random() * (max - min) + min;\r\n    };\r\n\r\n    return (\r\n        <Cascader \r\n            options={options}\r\n            onChange={onChange}\r\n            loadData={loadData}\r\n            changeOnSelect\r\n        />\r\n    );\r\n};\r\n\r\nexport default CmCdCascader;","import React, { useState, useEffect } from 'react';\nimport { Resizable } from 'react-resizable';\n\nimport { Layout, Menu, Breadcrumb, Form, Row, Col, Button, Table, Checkbox, DatePicker, Radio, Select } from 'antd';\nimport { UserOutlined, LayoutOutlined, NotificationOutlined } from '@ant-design/icons';\n\nimport AutoComplteEmail from './components/AutoComplteEmail';\nimport CmCdCascader from './components/CmCdCascader';\n\nimport './App.css';\n\nconst { Header, Content, Sider, Footer } = Layout;\nconst { SubMenu } = Menu;\nconst { RangePicker } = DatePicker;\nconst { Option } = Select;\n\nconst radioOptions = [\n    { label: 'Radio01', value: 'Radio01' },\n    { label: 'Radio02', value: 'Radio02' },\n    { label: 'Radio03', value: 'Radio03' },\n];\n\nfunction App() {\n\n    const children = [\n        { code: '1', name: '한국' },\n        { code: '2', name: '중국' },\n        { code: '3', name: '미국' },\n        { code: '4', name: '캐나다' },\n        { code: '5', name: '독일' },\n        { code: '6', name: '베트남' },\n        { code: '7', name: '홍콩' },\n    ].map(value => (<Option key={value.code} value={value.code}>{ value.name }</Option>) );\n\n    // const getFields = () => {\n    //     const count = 6;\n    //     const children = [];\n    \n    //     for (let i = 0; i < count; i++) {\n    //       children.push(\n    //         <Col span={8} key={i}>\n    //           <Form.Item\n    //             name={`field-${i}`}\n    //             label={`Field ${i}`}\n    //             rules={[\n    //               {\n    //                 required: true,\n    //                 message: 'Input something!',\n    //               },\n    //             ]}\n    //           >\n    //             <Input placeholder=\"placeholder\" />\n    //           </Form.Item>\n    //         </Col>,\n    //       );\n    //     }\n    \n    //     return children;\n    // };\n\n    const [columns, setColumns] = useState([\n        {\n          title: 'Date',\n          dataIndex: 'date',\n          width: 200,\n        },\n        {\n          title: 'Amount',\n          dataIndex: 'amount',\n          width: 100,\n          sorter: (a: any, b: any) => a.amount - b.amount,\n        },\n        {\n          title: 'Type',\n          dataIndex: 'type',\n          width: 100,\n        },\n        {\n          title: 'Note',\n          dataIndex: 'note',\n          width: 100,\n        },\n        {\n          title: 'Action',\n          key: 'action',\n          render: () => <a>Delete</a>,\n        },\n    ]);\n\n    const [components] = useState({\n        header: {\n          cell: ResizableTitle,\n        },\n    });\n\n    const [data] = useState([\n        {\n          key: 0,\n          date: '2018-02-11',\n          amount: 120,\n          type: 'income',\n          note: 'transfer',\n        },\n        {\n          key: 1,\n          date: '2018-03-11',\n          amount: 243,\n          type: 'income',\n          note: 'transfer',\n        },\n        {\n          key: 2,\n          date: '2018-04-11',\n          amount: 98,\n          type: 'income',\n          note: 'transfer',\n        },\n    ]);\n    \n    const [collapsed, setCollapsed] = useState(false);\n\n    \n\n    const [rdoVal, setRdoVal] = useState<string>('Radio01');\n\n    const onChangeRadio = (e: any) => {\n        setRdoVal(() => e.target.value);\n    };\n    \n    const handleResize = (index: any) => (e: any, { size }: any) => {\n\n        setColumns(\n            (columns) => {\n                const nextColumns = [...columns];\n\n                nextColumns[index] = {\n                    ...nextColumns[index],\n                    width: size.width\n                };\n\n                return nextColumns;\n            }\n        );\n    };\n\n    const toggleCollapsed = () => {\n        setCollapsed(() => !collapsed);\n    };\n\n    const handleChangeSelect = (value: string) => {\n        console.log(`selected ${value}`);\n    };\n\n    useEffect(()=>{\n        setColumns((state) => \n            columns.map((col, index) => ({\n                ...col,\n                onHeaderCell: (column: any) => ({\n                    width: column.width,\n                    onResize: handleResize(index),\n                }),\n            }))\n        );\n    }, []);\n\n    return (\n        <Layout>\n            <Layout style={{ minHeight: '100vh' }}>\n                <Sider width={200} className=\"site-layout-background\" collapsible collapsed={collapsed} onCollapse={toggleCollapsed}>\n                    <div \n                        className=\"logo\" \n                        style={{\n                            height: '32px',\n                            background: 'rgba(255, 255, 255, 0.2)',\n                            margin: '16px'\n                        }}\n                    />\n                    <Menu\n                        mode=\"inline\"\n                        theme=\"dark\"\n                        defaultSelectedKeys={['1']}\n                        defaultOpenKeys={['sub1']}\n                        style={{ height: '100%', borderRight: 0 }}>\n                        <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"subnav 1\">\n                            <Menu.Item key=\"1\">option1</Menu.Item>\n                            <Menu.Item key=\"2\">option2</Menu.Item>\n                            <Menu.Item key=\"3\">option3</Menu.Item>\n                            <Menu.Item key=\"4\">option4</Menu.Item>\n                        </SubMenu>\n                        <SubMenu key=\"sub2\" icon={<LayoutOutlined />} title=\"subnav 1\">\n                            <Menu.Item key=\"5\">option5</Menu.Item>\n                            <Menu.Item key=\"6\">option6</Menu.Item>\n                            <Menu.Item key=\"7\">option7</Menu.Item>\n                            <Menu.Item key=\"8\">option8</Menu.Item>\n                        </SubMenu>\n                        <SubMenu key=\"sub3\" icon={<NotificationOutlined />} title=\"subnav 1\">\n                            <Menu.Item key=\"9\">option9</Menu.Item>\n                            <Menu.Item key=\"10\">option10</Menu.Item>\n                            <Menu.Item key=\"11\">option11</Menu.Item>\n                            <Menu.Item key=\"12\">option12</Menu.Item>\n                        </SubMenu>\n                    </Menu>\n                </Sider>\n                <Layout className=\"site-layout\">\n                    <Header className=\"site-layout-background\" style={{ position: 'fixed', zIndex: 1, width: '100%', padding: 0 }}>\n                        <Menu mode=\"horizontal\" defaultSelectedKeys={['2']}>\n                            <Menu.Item key=\"1\">nav 1</Menu.Item>\n                            <Menu.Item key=\"2\">nav 2</Menu.Item>\n                            <Menu.Item key=\"3\">nav 3</Menu.Item>\n                        </Menu>\n                    </Header>\n                    <Breadcrumb style={{\n                            marginTop: '90px',\n                            marginLeft: '20px',\n                            marginBottom: '20px'\n                        }}>\n                        <Breadcrumb.Item>Home</Breadcrumb.Item>\n                        <Breadcrumb.Item>List</Breadcrumb.Item>\n                        <Breadcrumb.Item>App</Breadcrumb.Item>\n                    </Breadcrumb>\n                    <Content\n                        className=\"site-layout-background\"\n                        style={{\n                            margin: '10px 16px',\n                            padding: 10,\n                            minHeight: 280\n                        }}>\n                        <Form className=\"ant-advanced_search-form\">\n                            <Row gutter={24}>\n                                <Col span={6}>\n                                    <Form.Item\n                                        name={'Field99'}\n                                        label={'Email'}\n                                        rules={[\n                                        {\n                                            required: true,\n                                            message: 'Input something!',\n                                        },\n                                        ]}\n                                    >\n                                        <AutoComplteEmail />\n                                    </Form.Item>\n                                </Col>\n                                <Col span={10}>\n                                    <Form.Item\n                                        name={'Field98'}\n                                        label={'Checkbox'}\n                                    >\n                                        <Checkbox>체크박스1</Checkbox>\n                                        <Checkbox>체크박스2</Checkbox>\n                                        <Checkbox>체크박스3</Checkbox>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={6}>\n                                    <Form.Item\n                                        name={'Field97'}\n                                        label={'공통코드'}\n                                        rules={[\n                                        {\n                                            required: true,\n                                            message: 'Input something!',\n                                        },\n                                        ]}\n                                    >\n                                        <CmCdCascader />\n                                    </Form.Item>\n                                </Col>\n                                <Col span={6}>\n                                    <Form.Item\n                                        name={'Field96'}\n                                        label={'기간'}\n                                        rules={[\n                                        {\n                                            required: true,\n                                            message: 'Input something!',\n                                        },\n                                        ]}\n                                    >\n                                        <RangePicker />\n                                    </Form.Item>\n                                </Col>\n                                <Col span={6}>\n                                    <Form.Item\n                                        name={'Field95'}\n                                        label={'기간+시간'}\n                                        rules={[\n                                        {\n                                            required: true,\n                                            message: 'Input something!',\n                                        },\n                                        ]}\n                                    >\n                                        <RangePicker showTime />\n                                    </Form.Item>\n                                </Col>\n                                <Col span={6}>\n                                    <Form.Item\n                                        name={'Field94'}\n                                        label={'Radio'}\n                                        rules={[\n                                        {\n                                            required: true,\n                                            message: 'Input something!',\n                                        },\n                                        ]}\n                                    >\n                                        <Radio.Group\n                                            options={radioOptions}\n                                            onChange={onChangeRadio}\n                                            value={rdoVal}\n                                            optionType=\"button\"\n                                        />\n                                    </Form.Item>\n                                </Col>\n                                <Col span={6}>\n                                    <Form.Item\n                                        name={'Field93'}\n                                        label={'Multi Select'}\n                                        rules={[\n                                        {\n                                            required: true,\n                                            message: 'Input something!',\n                                        },\n                                        ]}\n                                    >\n                                        <Select\n                                            mode=\"multiple\"\n                                            style={{ width: '100%' }}\n                                            placeholder=\"Please select\"\n                                            onChange={handleChangeSelect}\n                                        >\n                                            {children}\n                                        </Select>\n                                    </Form.Item>\n                                </Col>\n                                {/* {getFields()} */}\n                            </Row>\n                            <Row>\n                                <Col \n                                    span={24}\n                                    style={{\n                                        textAlign: 'right'\n                                    }}>\n                                    <Button type=\"primary\" htmlType=\"submit\">Search</Button>\n                                    <Button\n                                        style={{\n                                        margin: '0 8px',\n                                    }}>\n                                        Clear\n                                    </Button>\n                                    <a\n                                        style={{\n                                            fontSize: 12,\n                                        }}\n                                    >\n                                    </a>\n                                </Col>\n                            </Row>\n                        </Form>\n                        <div className=\"search-result-list\" style={{ padding: 10 }}>\n                            <Table bordered components={components} columns={columns} dataSource={data} />\n                        </div>\n                    </Content>\n                    <Footer style={{ textAlign: 'center' }}>JHS ©2020 Created by JHS</Footer>\n                </Layout>\n            </Layout>\n        </Layout>\n    )\n}\n\nconst ResizableTitle = (props: any) => {\n\n    const { onResize, width, ...restProps } = props;\n\n    if (!width) {\n        return <th {...restProps} />;\n    }\n\n    return (\n        <Resizable\n            width={width}\n            height={0}\n            handle={\n                <span\n                className=\"react-resizable-handle\"\n                onClick={e => {\n                    e.stopPropagation();\n                }}\n                />\n            }\n            onResize={onResize}\n            draggableOpts={{ enableUserSelectHack: false }}\n            >\n            <th {...restProps} />\n        </Resizable>\n    );\n};\n  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}